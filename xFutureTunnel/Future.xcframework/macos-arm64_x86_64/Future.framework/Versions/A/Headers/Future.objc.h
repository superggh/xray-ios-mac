// Objective-C API for talking to future Go package.
//   gobind -lang=objc future
//
// File is generated by gobind. Do not edit.

#ifndef __Future_H__
#define __Future_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class FutureAndroidPoint;
@class FutureProtectedDialer;
@protocol FutureAndroidVPNService;
@class FutureAndroidVPNService;
@protocol FutureAppleNetworkinterface;
@class FutureAppleNetworkinterface;
@protocol FutureAppleReaderPacketFlow;
@class FutureAppleReaderPacketFlow;
@protocol FutureAppleWriterPacketFlow;
@class FutureAppleWriterPacketFlow;

@protocol FutureAndroidVPNService <NSObject>
- (long)setup:(NSString* _Nullable)Conf;
- (BOOL)vpnProtect:(long)p0;
@end

@protocol FutureAppleNetworkinterface <NSObject>
- (long)writePacket:(NSData* _Nullable)payload;
@end

@protocol FutureAppleReaderPacketFlow <NSObject>
- (void)onReadPacket:(NSData* _Nullable)payload len:(long)len family:(long)family;
@end

@protocol FutureAppleWriterPacketFlow <NSObject>
- (void)closeConnection;
- (long)writeTo:(NSData* _Nullable)payload;
@end

/**
 * AndroidPoint V2Ray Point Server
This is territory of Go, so no getter and setters!
 */
@interface FutureAndroidPoint : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAndroidPoint new AndroidPoint
 */
- (nullable instancetype)init:(id<FutureAndroidVPNService> _Nullable)s adns:(BOOL)adns;
@property (nonatomic) id<FutureAndroidVPNService> _Nullable supportSet;
// skipped field AndroidPoint.Vpoint with unsupported type: *github.com/xtls/xray-core/core.Instance

@property (nonatomic) BOOL isRunning;
@property (nonatomic) BOOL asyncResolve;
- (BOOL)measureDelay:(int64_t* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
- (void)setConfiguration:(NSString* _Nullable)configuration node:(NSString* _Nullable)node;
/**
 * RunLoop Run V2Ray main loop
 */
- (BOOL)startVPN:(NSString* _Nullable)url error:(NSError* _Nullable* _Nullable)error;
/**
 * StopLoop Stop V2Ray main loop
 */
- (BOOL)stopVPN:(NSError* _Nullable* _Nullable)error;
@end

/**
 * ProtectedDialer ...
 */
@interface FutureProtectedDialer : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method ProtectedDialer.Dial with unsupported parameter or return types

// skipped method ProtectedDialer.Init with unsupported parameter or return types

- (BOOL)isVServerReady;
// skipped method ProtectedDialer.PrepareDomain with unsupported parameter or return types

- (void)prepareResolveChan;
// skipped method ProtectedDialer.ResolveChan with unsupported parameter or return types

- (BOOL)vpnProtect:(long)p0;
@end

FOUNDATION_EXPORT NSString* _Nonnull FutureChangeURL(NSData* _Nullable configuration, NSString* _Nullable password);

/**
 * CheckVersionX string
This func will return libv2ray binding version and V2Ray version used.
 */
FOUNDATION_EXPORT NSString* _Nonnull FutureCheckVersionX(void);

FOUNDATION_EXPORT int64_t FutureDuration(void);

FOUNDATION_EXPORT BOOL FutureGetKniff(void);

FOUNDATION_EXPORT NSString* _Nonnull FutureGetUsing(void);

FOUNDATION_EXPORT NSString* _Nonnull FutureGetV2Env(void);

FOUNDATION_EXPORT void FutureGoPrintf(NSString* _Nullable l);

FOUNDATION_EXPORT void FutureGoPrintf_Info(NSString* _Nullable l);

FOUNDATION_EXPORT int64_t FutureGoogle204Delay(void);

/**
 * InitV2Env set v2 asset path
 */
FOUNDATION_EXPORT void FutureInitV2Env(NSString* _Nullable envPath);

FOUNDATION_EXPORT BOOL FutureMeasureOutboundDelay(NSString* _Nullable ConfigureFileContent, int64_t* _Nullable ret0_, NSError* _Nullable* _Nullable error);

/**
 * NewAndroidPoint new AndroidPoint
 */
FOUNDATION_EXPORT FutureAndroidPoint* _Nullable FutureNewAndroidPoint(id<FutureAndroidVPNService> _Nullable s, BOOL adns);

FOUNDATION_EXPORT void FutureRegisterAppleNetworkInterface(id<FutureAppleNetworkinterface> _Nullable packetFlow);

// skipped function StartInstance with unsupported parameter or return types


FOUNDATION_EXPORT NSString* _Nonnull FutureStartVPN(NSData* _Nullable configuration, NSString* _Nullable url);

FOUNDATION_EXPORT void FutureStopVPN(void);

FOUNDATION_EXPORT void FutureWriteAppleNetworkInterfacePacket(NSData* _Nullable data);

@class FutureAndroidVPNService;

@class FutureAppleNetworkinterface;

@class FutureAppleReaderPacketFlow;

@class FutureAppleWriterPacketFlow;

/**
 * AndroidVPNService To support Android VPN mode
 */
@interface FutureAndroidVPNService : NSObject <goSeqRefInterface, FutureAndroidVPNService> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (long)setup:(NSString* _Nullable)Conf;
- (BOOL)vpnProtect:(long)p0;
@end

@interface FutureAppleNetworkinterface : NSObject <goSeqRefInterface, FutureAppleNetworkinterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (long)writePacket:(NSData* _Nullable)payload;
@end

@interface FutureAppleReaderPacketFlow : NSObject <goSeqRefInterface, FutureAppleReaderPacketFlow> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onReadPacket:(NSData* _Nullable)payload len:(long)len family:(long)family;
@end

@interface FutureAppleWriterPacketFlow : NSObject <goSeqRefInterface, FutureAppleWriterPacketFlow> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)closeConnection;
- (long)writeTo:(NSData* _Nullable)payload;
@end

#endif
